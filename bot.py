# -*- coding: utf-8 -*-
import json
import asyncio
import logging
import keyboards as kb
import sqlite3
import requests
import config

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery, UserProfilePhotos
from aiogram.types.message import ContentTypes
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.callback_data import CallbackData
from aiogram import Bot, Dispatcher, executor, types

from config import BOT_TOKEN



storage = MemoryStorage()
loop = asyncio.get_event_loop()
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, loop=loop, storage=storage)

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await bot.send_photo(message.from_user.id, "https://telegra.ph/file/2f5f388db3c2bbaf9decf.png", caption="–¶–µ–Ω–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É:\nüëâ<a href='https://t.me/work_rabota_ua'>–†–∞–±–æ—Ç–∞.–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞.–£–∫—Ä–∞–∏–Ω–∞</a>\n\nüìå –ó–∞–∫—Ä–µ–ø —Å–æ–æ–±—â–µ–Ω–∏—è => 150–≥—Ä–Ω/–¥–µ–Ω—å\n\nüìù –¢–µ–∫—Å—Ç –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ => 150–≥—Ä–Ω/–¥–µ–Ω—å\n\nü§ñ –ë–æ—Ç-—Ä–∞—Å—Å—ã–ª–∫–∞ => 100–≥—Ä–Ω/–¥–µ–Ω—å\n\nüïπ –ö–Ω–æ–ø–∫–∞ => 50–≥—Ä–Ω/–¥–µ–Ω—å\n\n<b>–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 3-—Ö –¥–Ω–µ–π, —Å–∫–∏–¥–∫–∞ 30%</b>", reply_markup=kb.markup_start)

@dp.message_handler(commands=['help'])
async def send_welcome(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∏ –ª—é–±–æ–º –≤–æ–ø—Ä–æ—Å–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è üëâ @mmmoneyadmin\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞ @krsvski')

@dp.callback_query_handler(text='zakrep')
async def zakrep_asd(message: types.Message):
    await bot.send_photo(message.from_user.id, "https://telegra.ph/file/9fa8d41276a025759b3c0.jpg", caption="üìå –ó–∞–∫—Ä–µ–ø–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!\n–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —à–∞–ø–∫–µ –≥—Ä—É–ø–ø—ã.", reply_markup=kb.markup_buy)

@dp.callback_query_handler(text='textre')
async def textre_asd(message: types.Message):
    await bot.send_photo(message.from_user.id, "https://telegra.ph/file/08bdbed12a9a34c9b41c8.jpg", caption="üìù –í–∞—à —Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.\n–ö–∞–∂–¥—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç –æ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –µ–º—É + –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –≤–∏–¥—è—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ)", reply_markup=kb.markup_buy)

@dp.callback_query_handler(text='bot')
async def bot_asd(message: types.Message):
    await bot.send_photo(message.from_user.id, "https://telegra.ph/file/f83ff1eeea296039dae91.jpg", caption="ü§ñ –ë–æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞.\n–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã.", reply_markup=kb.markup_buy)

@dp.callback_query_handler(text='knopka')
async def knopka_asd(message: types.Message):
    await bot.send_photo(message.from_user.id, "https://telegra.ph/file/a9c931af32b2e354f029d.jpg", caption="üïπ –ö–Ω–æ–ø–∫–∞.\n–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—É–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ —Ç–∞–∫ –∏ —Å–∞–π—Ç –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏–ª–∏ —Å—Ä–∞–∑—É –∫ –≤–∞–º –≤ –ª—Å", reply_markup=kb.markup_buy)

@dp.callback_query_handler(text='back')
async def send_welcoe(message: types.Message):
    await bot.send_photo(message.from_user.id, "https://telegra.ph/file/2f5f388db3c2bbaf9decf.png", caption="–¶–µ–Ω–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É:\nüëâ<a href='https://t.me/work_rabota_ua'>–†–∞–±–æ—Ç–∞.–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞.–£–∫—Ä–∞–∏–Ω–∞</a>\n\nüìå –ó–∞–∫—Ä–µ–ø —Å–æ–æ–±—â–µ–Ω–∏—è => 150–≥—Ä–Ω/–¥–µ–Ω—å\n\nüìù –¢–µ–∫—Å—Ç –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏ => 150–≥—Ä–Ω/–¥–µ–Ω—å\n\nü§ñ –ë–æ—Ç-—Ä–∞—Å—Å—ã–ª–∫–∞ => 100–≥—Ä–Ω/–¥–µ–Ω—å\n\nüïπ –ö–Ω–æ–ø–∫–∞ => 50–≥—Ä–Ω/–¥–µ–Ω—å\n\n<b>–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 3-—Ö –¥–Ω–µ–π, —Å–∫–∏–¥–∫–∞ 30%</b>", reply_markup=kb.markup_start)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
